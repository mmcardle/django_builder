name: CI
on: [pull_request]
jobs:
  
  build:
    name: Build
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - run: sudo apt-get install -y jq
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        id: yarn-cache  # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-v4-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v4-

      - run: yarn install
      - run: yarn build

      - name: Upload djangobuilder4 dist directory
        uses: actions/upload-artifact@v4
        with:
          name: djangobuilder4_dist
          path: ./packages/djangobuilder4/dist
      
      - name: Upload djangobuilder.io dist directory
        uses: actions/upload-artifact@v4
        with:
          name: djangobuilder.io_dist
          path: ./packages/djangobuilder.io/dist

  lint:
    name: Lint
    needs: [build]
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
  
      - uses: actions/cache@v3
        id: yarn-cache  # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-v4-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v4-
      - run: yarn
      - run: yarn lint

  smoke_tests:
    name: Core - Smoke tests
    needs: [build]
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - run: yarn
      - run: yarn test_smoke
 
  core_tests:
    name: Core - Unit tests
    needs: [smoke_tests]
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - run: yarn
      - run: yarn test_core

  cli_tests:
    name: DB.io - CLI Tests
    needs: [build]
    runs-on: ubuntu-24.04
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: mysecretpassword
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    strategy:
      matrix:
        version: [3.11, 3.12, 3.13]
        django_version: [3.2, 4.2]
    steps:
      - name: Install websocat
        uses: baptiste0928/cargo-install@v3
        with:
          crate: websocat
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          # Install a specific version of uv.
          version: "0.5.6"
      - run: yarn
      - name: Run Smoke tests
        run: make smoke_test_ci
        env:
          POSTGRES_URL: postgres://postgres:mysecretpassword@localhost:5432/postgres
          PYTHON_VERSION: ${{ matrix.version }}
          DJANGO_VERSION: ${{ matrix.django_version }}
  
  io_tests:
    name: DB.io - Unit Tests
    needs: [build]
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - run: yarn
      - run: yarn test_io