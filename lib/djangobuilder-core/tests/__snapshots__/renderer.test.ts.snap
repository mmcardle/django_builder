// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'delete_button.html'
} 1`] = `
"
<button hx-post="{{ object.get_htmx_delete_url }}"
        hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'
        hx-swap='outerHTML'
        hx-target="closest tr"
        type="submit"
  >Delete
</button>
"
`;

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'delete_button.html'
} 2`] = `
"
<button hx-post="{{ object.get_htmx_delete_url }}"
        hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'
        hx-swap='outerHTML'
        hx-target="closest tr"
        type="submit"
  >Delete
</button>
"
`;

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'delete_button.html'
} 3`] = `
"
<button hx-post="{{ object.get_htmx_delete_url }}"
        hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'
        hx-swap='outerHTML'
        hx-target="closest tr"
        type="submit"
  >Delete
</button>
"
`;

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'requirements.txt'
} 1`] = `
"
Django==4.1
django-extensions
djangorestframework
psycopg2-binary
Pillow
"
`;

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'requirements.txt'
} 2`] = `
"
Django==4.1
django-extensions
djangorestframework
django-htmx
psycopg2-binary
Pillow
"
`;

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'requirements.txt'
} 3`] = `
"
Django==4.1
django-extensions
djangorestframework
channels
channels_redis
psycopg2-binary
Pillow
"
`;

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'requirements-dev.txt'
} 1`] = `
"
pytest
pytest-django
"
`;

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'requirements-dev.txt'
} 2`] = `
"
pytest
pytest-django
"
`;

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'requirements-dev.txt'
} 3`] = `
"
pytest
pytest-django
"
`;

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'test_helpers.py'
} 1`] = `
"
import random
import string
import uuid

from datetime import timedelta, time
from django.contrib.auth.models import User
from django.contrib.auth.models import AbstractUser
from django.contrib.auth.models import AbstractBaseUser
from django.contrib.auth.models import Group
from django.contrib.contenttypes.models import ContentType
from datetime import datetime
from psycopg2.extras import NumericRange, DateTimeTZRange, DateRange

from testapp1 import models as testapp1_models


def random_string(length=10):
    # Create a random string of length length
    letters = string.ascii_lowercase
    return "".join(random.choice(letters) for i in range(length))


def create_User(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return User.objects.create(**defaults)


def create_AbstractUser(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return AbstractUser.objects.create(**defaults)


def create_AbstractBaseUser(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return AbstractBaseUser.objects.create(**defaults)


def create_Group(**kwargs):
    defaults = {
        "name": "%s_group" % random_string(5),
    }
    defaults.update(**kwargs)
    return Group.objects.create(**defaults)


def create_ContentType(**kwargs):
    defaults = {
    }
    defaults.update(**kwargs)
    return ContentType.objects.create(**defaults)


def create_testapp1_TestModel1(**kwargs):
    defaults = {
        'TestField1': 'text',
        "TestField1": create_User(),
    }
    defaults.update(**kwargs)
    result = testapp1_models.TestModel1.objects.create(**defaults)
    return result

  
"
`;

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'test_helpers.py'
} 2`] = `
"
import random
import string
import uuid

from datetime import timedelta, time
from django.contrib.auth.models import User
from django.contrib.auth.models import AbstractUser
from django.contrib.auth.models import AbstractBaseUser
from django.contrib.auth.models import Group
from django.contrib.contenttypes.models import ContentType
from datetime import datetime
from psycopg2.extras import NumericRange, DateTimeTZRange, DateRange

from testapp2 import models as testapp2_models


def random_string(length=10):
    # Create a random string of length length
    letters = string.ascii_lowercase
    return "".join(random.choice(letters) for i in range(length))


def create_User(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return User.objects.create(**defaults)


def create_AbstractUser(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return AbstractUser.objects.create(**defaults)


def create_AbstractBaseUser(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return AbstractBaseUser.objects.create(**defaults)


def create_Group(**kwargs):
    defaults = {
        "name": "%s_group" % random_string(5),
    }
    defaults.update(**kwargs)
    return Group.objects.create(**defaults)


def create_ContentType(**kwargs):
    defaults = {
    }
    defaults.update(**kwargs)
    return ContentType.objects.create(**defaults)


def create_testapp2_TestModel2(**kwargs):
    defaults = {
        'TestField2': 'text',
        'TestField3': 'text',
        "TestField2": create_User(),
        "TestField3": create_User(),
    }
    defaults.update(**kwargs)
    result = testapp2_models.TestModel2.objects.create(**defaults)
    return result

  
"
`;

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'test_helpers.py'
} 3`] = `
"
import random
import string
import uuid

from datetime import timedelta, time
from django.contrib.auth.models import User
from django.contrib.auth.models import AbstractUser
from django.contrib.auth.models import AbstractBaseUser
from django.contrib.auth.models import Group
from django.contrib.contenttypes.models import ContentType
from datetime import datetime
from psycopg2.extras import NumericRange, DateTimeTZRange, DateRange

from testapp3 import models as testapp3_models


def random_string(length=10):
    # Create a random string of length length
    letters = string.ascii_lowercase
    return "".join(random.choice(letters) for i in range(length))


def create_User(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return User.objects.create(**defaults)


def create_AbstractUser(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return AbstractUser.objects.create(**defaults)


def create_AbstractBaseUser(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return AbstractBaseUser.objects.create(**defaults)


def create_Group(**kwargs):
    defaults = {
        "name": "%s_group" % random_string(5),
    }
    defaults.update(**kwargs)
    return Group.objects.create(**defaults)


def create_ContentType(**kwargs):
    defaults = {
    }
    defaults.update(**kwargs)
    return ContentType.objects.create(**defaults)


def create_testapp3_TestModel3(**kwargs):
    defaults = {
    }
    defaults.update(**kwargs)
    result = testapp3_models.TestModel3.objects.create(**defaults)
    return result

  
"
`;

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'test_requirements.txt'
} 1`] = `
"
pytest
pytest-django
"
`;

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'test_requirements.txt'
} 2`] = `
"
pytest
pytest-django
"
`;

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'test_requirements.txt'
} 3`] = `
"
pytest
pytest-django
"
`;

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'test_settings.py'
} 1`] = `
"
from TestProject.settings import *  # noqa

# Override any settings required for tests here
"
`;

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'test_settings.py'
} 2`] = `
"
from TestProject.settings import *  # noqa

# Override any settings required for tests here
"
`;

exports[`Project file tests DjangoTestCase {
  project: [DjangoProject],
  filename: 'test_settings.py'
} 3`] = `
"
from TestProject.settings import *  # noqa

# Override any settings required for tests here
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: '__init__.py' } 1`] = `
"
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: '__init__.py' } 2`] = `
"
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: '__init__.py' } 3`] = `
"
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'asgi.py' } 1`] = `
"
"""
ASGI entrypoint for TestProject. Configures Django and then runs the application
defined in the ASGI_APPLICATION setting.
"""

import os
import django
from channels.routing import get_default_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "TestProject.settings")
django.setup()
application = get_default_application()
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'asgi.py' } 2`] = `
"
"""
ASGI entrypoint for TestProject. Configures Django and then runs the application
defined in the ASGI_APPLICATION setting.
"""

import os
import django
from channels.routing import get_default_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "TestProject.settings")
django.setup()
application = get_default_application()
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'asgi.py' } 3`] = `
"
"""
ASGI entrypoint for TestProject. Configures Django and then runs the application
defined in the ASGI_APPLICATION setting.
"""

import os
import django
from channels.routing import get_default_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "TestProject.settings")
django.setup()
application = get_default_application()
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'base.html' } 1`] = `
"
{% load static %}
<html>
  <head>
    <title>Django Builder - TestProject</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    
    {% block extrahead %}{% endblock %}
  </head>
  <body>
    {% block allcontent %}
    <div id="content" class="container">
      <h2>Home: <a href="{% url 'index' %}">TestProject</a></h2>
      <div class="card">
        <div class="card-body">
          <p class="card-text">{% block content %}{% endblock %}</p>
        </div>
      </div>
    </div>
</div>
  {% endblock %}
  </body>
</html>
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'base.html' } 2`] = `
"
{% load static %}
<html>
  <head>
    <title>Django Builder - TestProject</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    
    {% block extrahead %}{% endblock %}
  </head>
  <body>
    {% block allcontent %}
    <div id="content" class="container">
      <h2>Home: <a href="{% url 'index' %}">TestProject</a></h2>
      <div class="card">
        <div class="card-body">
          <p class="card-text">{% block content %}{% endblock %}</p>
        </div>
      </div>
    </div>
</div>
  {% endblock %}
  </body>
</html>
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'base.html' } 3`] = `
"
{% load static %}
<html>
  <head>
    <title>Django Builder - TestProject</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    
    {% block extrahead %}{% endblock %}
  </head>
  <body>
    {% block allcontent %}
    <div id="content" class="container">
      <h2>Home: <a href="{% url 'index' %}">TestProject</a></h2>
      <div class="card">
        <div class="card-body">
          <p class="card-text">{% block content %}{% endblock %}</p>
        </div>
      </div>
    </div>
    <div class="container mt-3">
      <div class="card">
      <div class="card-body">
          <h5 class="card-title">WebSocket Messages</h5>
          <p class="card-text"><code id="messages"></code></p>
      </div>
    </div>
</div>
<script>
    var wsprotocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://'
    var ws = wsprotocol + window.location.hostname + ':' + window.location.port + '/ws/'
    var socket = new WebSocket(ws);

    socket.onopen = function() {
      // Web Socket is connected, send some text
      socket.send("Text from Javascript");
      // Send some binary data
      socket.send(new Blob(["Bytes from Javascript"]));
    };

    socket.onmessage = function (evt) { 
      console.log(evt)
      var received_msg = evt.data;
      console.log("Message received...", received_msg);
      var node = document.createElement("div");
      if (received_msg instanceof Blob) {
        received_msg.text().then(function (received_text) {
          var textnode = document.createTextNode("> " + received_text);
          node.appendChild(textnode);
          document.getElementById("messages").appendChild(node);
        })
      } else {
        var textnode = document.createTextNode("> " + received_msg);
        node.appendChild(textnode);
        document.getElementById("messages").appendChild(node);
      }
    };
  </script>
  {% endblock %}
  </body>
</html>
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'consumers.py' } 1`] = `
"
from channels.generic.websocket import WebsocketConsumer


class TestProjectWebSocketConsumer(WebsocketConsumer):

    def connect(self):
        self.accept()

    def receive(self, text_data=None, bytes_data=None):
        if text_data:
            print(f"Received text={text_data}")
            self.send(text_data="Hello from TestProject WebSocketConsumer!")
        if bytes_data:
            print(f"Received bytes={bytes_data}")
            self.send(bytes_data=b"Hello from TestProject WebSocketConsumer!")

    def disconnect(self, message):
        # Called when disconnected
        pass
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'consumers.py' } 2`] = `
"
from channels.generic.websocket import WebsocketConsumer


class TestProjectWebSocketConsumer(WebsocketConsumer):

    def connect(self):
        self.accept()

    def receive(self, text_data=None, bytes_data=None):
        if text_data:
            print(f"Received text={text_data}")
            self.send(text_data="Hello from TestProject WebSocketConsumer!")
        if bytes_data:
            print(f"Received bytes={bytes_data}")
            self.send(bytes_data=b"Hello from TestProject WebSocketConsumer!")

    def disconnect(self, message):
        # Called when disconnected
        pass
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'consumers.py' } 3`] = `
"
from channels.generic.websocket import WebsocketConsumer


class TestProjectWebSocketConsumer(WebsocketConsumer):

    def connect(self):
        self.accept()

    def receive(self, text_data=None, bytes_data=None):
        if text_data:
            print(f"Received text={text_data}")
            self.send(text_data="Hello from TestProject WebSocketConsumer!")
        if bytes_data:
            print(f"Received bytes={bytes_data}")
            self.send(bytes_data=b"Hello from TestProject WebSocketConsumer!")

    def disconnect(self, message):
        # Called when disconnected
        pass
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'create.html' } 1`] = `
"
<tbody hx-swap-oob="beforeend:#{{ model_id }}-table">
  <tr>
      <td>{{ object }}</td>
      <td>
      <button hx-post="{{ object.get_htmx_delete_url }}"
          hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'
          hx-swap='outerHTML'
          hx-target="closest tr"
          type="submit"
        >Delete
      </button>
      </td>
  </tr>
</tbody>

{{ form.as_div }}
<button type="submit">Add</button>
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'create.html' } 2`] = `
"
<tbody hx-swap-oob="beforeend:#{{ model_id }}-table">
  <tr>
      <td>{{ object }}</td>
      <td>
      <button hx-post="{{ object.get_htmx_delete_url }}"
          hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'
          hx-swap='outerHTML'
          hx-target="closest tr"
          type="submit"
        >Delete
      </button>
      </td>
  </tr>
</tbody>

{{ form.as_div }}
<button type="submit">Add</button>
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'create.html' } 3`] = `
"
<tbody hx-swap-oob="beforeend:#{{ model_id }}-table">
  <tr>
      <td>{{ object }}</td>
      <td>
      <button hx-post="{{ object.get_htmx_delete_url }}"
          hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'
          hx-swap='outerHTML'
          hx-target="closest tr"
          type="submit"
        >Delete
      </button>
      </td>
  </tr>
</tbody>

{{ form.as_div }}
<button type="submit">Add</button>
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'form.html' } 1`] = `
"
<form hx-post="{{ create_url }}" hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'>
  {{ form.as_div }}
  <button type="submit">Add</button>
</form>
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'form.html' } 2`] = `
"
<form hx-post="{{ create_url }}" hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'>
  {{ form.as_div }}
  <button type="submit">Add</button>
</form>
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'form.html' } 3`] = `
"
<form hx-post="{{ create_url }}" hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'>
  {{ form.as_div }}
  <button type="submit">Add</button>
</form>
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'htmx.html' } 1`] = `
"
{% extends "base.html" %}
{% block extrahead %}
<script src="https://unpkg.com/htmx.org@1.8.4"></script>
<script>
  htmx.config.useTemplateFragments = true;
</script>
{% endblock %}
{% block allcontent %}
<div id="content" class="container">
  <h2>Home: <a href="{% url 'index' %}">TestProject</a></h2>
  <div class="container">
    <div class="row">
    <div class="col col-lg-6">
      <h5>Add A TestModel1</h5>
      <div hx-get="{% url 'testapp1_TestModel1_htmx_create' %}" hx-trigger="load" hx-swap="outerHTML"></div>
      <h4>TestModel1 List</h4>
      <div hx-get="{% url 'testapp1_TestModel1_htmx_list' %}" hx-trigger="load">
      </div>
    </div>
    </div>
  </div>
</div>
{% endblock %}
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'htmx.html' } 2`] = `
"
{% extends "base.html" %}
{% block extrahead %}
<script src="https://unpkg.com/htmx.org@1.8.4"></script>
<script>
  htmx.config.useTemplateFragments = true;
</script>
{% endblock %}
{% block allcontent %}
<div id="content" class="container">
  <h2>Home: <a href="{% url 'index' %}">TestProject</a></h2>
  <div class="container">
    <div class="row">
    <div class="col col-lg-6">
      <h5>Add A TestModel2</h5>
      <div hx-get="{% url 'testapp2_TestModel2_htmx_create' %}" hx-trigger="load" hx-swap="outerHTML"></div>
      <h4>TestModel2 List</h4>
      <div hx-get="{% url 'testapp2_TestModel2_htmx_list' %}" hx-trigger="load">
      </div>
    </div>
    </div>
  </div>
</div>
{% endblock %}
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'htmx.html' } 3`] = `
"
{% extends "base.html" %}
{% block extrahead %}
<script src="https://unpkg.com/htmx.org@1.8.4"></script>
<script>
  htmx.config.useTemplateFragments = true;
</script>
{% endblock %}
{% block allcontent %}
<div id="content" class="container">
  <h2>Home: <a href="{% url 'index' %}">TestProject</a></h2>
  <div class="container">
    <div class="row">
    <div class="col col-lg-6">
      <h5>Add A TestModel3</h5>
      <div hx-get="{% url 'testapp3_TestModel3_htmx_create' %}" hx-trigger="load" hx-swap="outerHTML"></div>
      <h4>TestModel3 List</h4>
      <div hx-get="{% url 'testapp3_TestModel3_htmx_list' %}" hx-trigger="load">
      </div>
    </div>
    </div>
  </div>
</div>
{% endblock %}
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'index.html' } 1`] = `
"
{% extends "base.html" %}
{% block content %}

<div class='container'>
  <div class='card'>
    <div class='card-body'>
      <div class="m-2">
        <h4>testapp1</h4>
      </div>
      <div class="m-2">
      <a class="btn btn-light" href="{% url 'testapp1_TestModel1_list' %}">TestModel1 Listing</a>
      </div>
    </div>
  </div>
</div>

<div class='container'>
  <div class='card'>
    <div class='card-body'>
      <div>
        <a href="{% url 'htmx' %}">HTMX UI</a>
      </div>
    </div>
  </div>
</div>
{% endblock %}
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'index.html' } 2`] = `
"
{% extends "base.html" %}
{% block content %}

<div class='container'>
  <div class='card'>
    <div class='card-body'>
      <div class="m-2">
        <h4>testapp2</h4>
      </div>
      <div class="m-2">
      <a class="btn btn-light" href="{% url 'testapp2_TestModel2_list' %}">TestModel2 Listing</a>
      </div>
    </div>
  </div>
</div>

<div class='container'>
  <div class='card'>
    <div class='card-body'>
      <div>
        <a href="{% url 'htmx' %}">HTMX UI</a>
      </div>
    </div>
  </div>
</div>
{% endblock %}
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'index.html' } 3`] = `
"
{% extends "base.html" %}
{% block content %}

<div class='container'>
  <div class='card'>
    <div class='card-body'>
      <div class="m-2">
        <h4>testapp3</h4>
      </div>
      <div class="m-2">
      <a class="btn btn-light" href="{% url 'testapp3_TestModel3_list' %}">TestModel3 Listing</a>
      </div>
    </div>
  </div>
</div>

<div class='container'>
  <div class='card'>
    <div class='card-body'>
      <div>
        <a href="{% url 'htmx' %}">HTMX UI</a>
      </div>
    </div>
  </div>
</div>
{% endblock %}
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'list.html' } 1`] = `
"
<table class="table">
  <thead>
      <tr>
          <th>Name</th>
          <th>Actions</th>
      </tr>
  </thead>
  <tbody id="{{ model_id }}-table">
    {% for object in objects %}
    <tr>
      <td>{{ object }}</td>
      <td>
        {% include "./delete_button.html" with object=object %}
      </td>
    <tr>
     {% endfor %}
  </tbody>
</table>
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'list.html' } 2`] = `
"
<table class="table">
  <thead>
      <tr>
          <th>Name</th>
          <th>Actions</th>
      </tr>
  </thead>
  <tbody id="{{ model_id }}-table">
    {% for object in objects %}
    <tr>
      <td>{{ object }}</td>
      <td>
        {% include "./delete_button.html" with object=object %}
      </td>
    <tr>
     {% endfor %}
  </tbody>
</table>
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'list.html' } 3`] = `
"
<table class="table">
  <thead>
      <tr>
          <th>Name</th>
          <th>Actions</th>
      </tr>
  </thead>
  <tbody id="{{ model_id }}-table">
    {% for object in objects %}
    <tr>
      <td>{{ object }}</td>
      <td>
        {% include "./delete_button.html" with object=object %}
      </td>
    <tr>
     {% endfor %}
  </tbody>
</table>
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'manage.py' } 1`] = `
"
#!/usr/bin/env python
import os
import sys

if __name__ == '__main__':
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TestProject.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'manage.py' } 2`] = `
"
#!/usr/bin/env python
import os
import sys

if __name__ == '__main__':
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TestProject.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'manage.py' } 3`] = `
"
#!/usr/bin/env python
import os
import sys

if __name__ == '__main__':
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TestProject.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'pytest.ini' } 1`] = `
"
[pytest]
DJANGO_SETTINGS_MODULE = test_settings
addopts=-v -ra
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'pytest.ini' } 2`] = `
"
[pytest]
DJANGO_SETTINGS_MODULE = test_settings
addopts=-v -ra
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'pytest.ini' } 3`] = `
"
[pytest]
DJANGO_SETTINGS_MODULE = test_settings
addopts=-v -ra
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'routing.py' } 1`] = `
"
from django.conf.urls import url

from channels.routing import ChannelNameRouter, ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack

from TestProject.consumers import TestProject_WebSocketConsumer

from testapp1.consumers import Testapp1Consumer

application = ProtocolTypeRouter({

    # WebSocket handler
    "websocket": AuthMiddlewareStack(
        URLRouter([
            url(r"^ws/$", XXX_PROJECT_NAME_XXX_WebSocketConsumer.as_asgi()),
        ])
    ),
    "channel": ChannelNameRouter({
        "testapp1": Testapp1Consumer,
    })
})
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'routing.py' } 2`] = `
"
from django.conf.urls import url

from channels.routing import ChannelNameRouter, ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack

from TestProject.consumers import TestProject_WebSocketConsumer

from testapp2.consumers import Testapp2Consumer

application = ProtocolTypeRouter({

    # WebSocket handler
    "websocket": AuthMiddlewareStack(
        URLRouter([
            url(r"^ws/$", XXX_PROJECT_NAME_XXX_WebSocketConsumer.as_asgi()),
        ])
    ),
    "channel": ChannelNameRouter({
        "testapp2": Testapp2Consumer,
    })
})
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'routing.py' } 3`] = `
"
from django.conf.urls import url

from channels.routing import ChannelNameRouter, ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack

from TestProject.consumers import TestProject_WebSocketConsumer

from testapp3.consumers import Testapp3Consumer

application = ProtocolTypeRouter({

    # WebSocket handler
    "websocket": AuthMiddlewareStack(
        URLRouter([
            url(r"^ws/$", XXX_PROJECT_NAME_XXX_WebSocketConsumer.as_asgi()),
        ])
    ),
    "channel": ChannelNameRouter({
        "testapp3": Testapp3Consumer,
    })
})
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'settings.py' } 1`] = `
"
"""
Django settings for TestProject project.

TestProject Description

For more information on this file, see
https://docs.djangoproject.com/

"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '^l)7d*%h&db4uft@dk%h-w&nup#pu%)a!d)c7jwgoixo5_hm0$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    
    
    'testapp1',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
]

ROOT_URLCONF = 'TestProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TestProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'mysecretpassword',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'settings.py' } 2`] = `
"
"""
Django settings for TestProject project.

TestProject Description

For more information on this file, see
https://docs.djangoproject.com/

"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '^l)7d*%h&db4uft@dk%h-w&nup#pu%)a!d)c7jwgoixo5_hm0$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    
    'django_htmx',
    'testapp2',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
]

ROOT_URLCONF = 'TestProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TestProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'mysecretpassword',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'settings.py' } 3`] = `
"
"""
Django settings for TestProject project.

TestProject Description

For more information on this file, see
https://docs.djangoproject.com/

"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '^l)7d*%h&db4uft@dk%h-w&nup#pu%)a!d)c7jwgoixo5_hm0$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'channels',
    
    'testapp3',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
]

ROOT_URLCONF = 'TestProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TestProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'mysecretpassword',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'urls.py' } 1`] = `
"
"""
TestProject URL Configuration

The 'urlpatterns' list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.views.generic import TemplateView

from . import views

urlpatterns = [
    path('', TemplateView.as_view(template_name='index.html'), name='index'),
    path('testapp1/', include('testapp1.urls')),
    path('admin/', admin.site.urls),
]
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'urls.py' } 2`] = `
"
"""
TestProject URL Configuration

The 'urlpatterns' list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.views.generic import TemplateView

from . import views

urlpatterns = [
    path('', TemplateView.as_view(template_name='index.html'), name='index'),
    path('testapp2/', include('testapp2.urls')),
    path('htmx/', views.htmx_home, name='htmx'),
    path('admin/', admin.site.urls),
]
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'urls.py' } 3`] = `
"
"""
TestProject URL Configuration

The 'urlpatterns' list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.views.generic import TemplateView

from . import views

urlpatterns = [
    path('', TemplateView.as_view(template_name='index.html'), name='index'),
    path('testapp3/', include('testapp3.urls')),
    path('admin/', admin.site.urls),
]
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'views.py' } 1`] = `
"
# No project views

"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'views.py' } 2`] = `
"
from django.shortcuts import render


def htmx_home(request):
    return render(request, 'htmx/htmx.html')

"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'views.py' } 3`] = `
"
# No project views

"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'wsgi.py' } 1`] = `
"
"""
WSGI config for TestProject.

It exposes the WSGI callable as a module-level variable named 'application'.

For more information on this file, see
https://docs.djangoproject.com/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TestProject.settings')

application = get_wsgi_application()
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'wsgi.py' } 2`] = `
"
"""
WSGI config for TestProject.

It exposes the WSGI callable as a module-level variable named 'application'.

For more information on this file, see
https://docs.djangoproject.com/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TestProject.settings')

application = get_wsgi_application()
"
`;

exports[`Project file tests DjangoTestCase { project: [DjangoProject], filename: 'wsgi.py' } 3`] = `
"
"""
WSGI config for TestProject.

It exposes the WSGI callable as a module-level variable named 'application'.

For more information on this file, see
https://docs.djangoproject.com/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TestProject.settings')

application = get_wsgi_application()
"
`;

exports[`Render Basic Project App Files __init__.py 1`] = `
"
"
`;

exports[`Render Basic Project App Files __init__.py 2`] = `
"
"
`;

exports[`Render Basic Project App Files admin.py 1`] = `
"
from django.contrib import admin
from django import forms

from . import models


class TestModel1AdminForm(forms.ModelForm):

    class Meta:
        model = models.TestModel1
        fields = "__all__"


class TestModel1Admin(admin.ModelAdmin):
    form = TestModel1AdminForm
    list_display = [
        'TestField1',
        'TestField1',
    ]
    readonly_fields = [
        'TestField1',
        'TestField1',
    ]


admin.site.register(models.TestModel1, TestModel1Admin)

"
`;

exports[`Render Basic Project App Files api.py 1`] = `
"
from rest_framework import viewsets, permissions
from . import models
from . import serializers


class TestModel1ViewSet(viewsets.ModelViewSet):
    """ViewSet for the TestModel1 class"""

    queryset = models.TestModel1.objects.all()
    serializer_class = serializers.TestModel1Serializer
    permission_classes = [permissions.IsAuthenticated]

"
`;

exports[`Render Basic Project App Files consumers.py 1`] = `
"
from channels.consumer import SyncConsumer


class Testapp1Consumer(SyncConsumer):

    def app1_message(self, message):
        # do something with message
        pass
"
`;

exports[`Render Basic Project App Files forms.py 1`] = `
"
from django import forms
from . import models
#from  import auth.User

class TestModel1Form(forms.ModelForm):
    class Meta:
        model = models.TestModel1
        fields = [
            'TestField1',
            'TestField1',
        ]

    def __init__(self, *args, **kwargs):
        super(TestModel1Form, self).__init__(*args, **kwargs)
        #self.fields["TestField1"].queryset = [object Object].objects.all()
"
`;

exports[`Render Basic Project App Files htmx.py 1`] = `
"
from django.views import generic
from django.shortcuts import HttpResponse
from django.template.response import TemplateResponse
from django.urls import reverse_lazy

from . import models
from . import forms

class HTMXTestModel1ListView(generic.ListView):
    model = models.TestModel1
    form_class = forms.TestModel1Form
    
    def get(self, request, *args, **kwargs):
        super().get(request, *args, **kwargs)
        context = {
            "model_id": self.model._meta.model_name,
            "objects": self.get_queryset()
        }
        return TemplateResponse(request,'htmx/list.html', context)


class HTMXTestModel1CreateView(generic.CreateView):
    model = models.TestModel1
    form_class = forms.TestModel1Form
    
    def get(self, request, *args, **kwargs):
        super().get(request, *args, **kwargs)
        context = {
            "create_url": self.model.get_htmx_create_url(),
            "form": self.get_form()
        }
        return TemplateResponse(request, 'htmx/form.html', context)

    def form_valid(self, form):
        super().form_valid(form)
        context = {
            "model_id": self.model._meta.model_name,
            "object": self.object,
            "form": form
        }
        return TemplateResponse(self.request, 'htmx/create.html', context)

    def form_invalid(self, form):
        super().form_invalid(form)
        context = {
            "create_url": self.model.get_htmx_create_url(),
            "form": self.get_form()
        }
        return TemplateResponse(self.request, 'htmx/form.html', context)


class HTMXTestModel1DeleteView(generic.DeleteView):
    model = models.TestModel1
    success_url = reverse_lazy("testapp1_TestModel1_htmx_list")
    
    def form_valid(self, form):
        super().form_valid(form)
        return HttpResponse()

"
`;

exports[`Render Basic Project App Files models.py 1`] = `
"
import time
import uuid
from datetime import timedelta, datetime, time

from django.db import models
from django.urls import reverse
from django.contrib.postgres import fields as postgres_fields
from django.contrib.postgres.fields import ranges as postgres_range_fields


class TestModel1(models.Model):

    TestField1 = models.ForeignKey("auth.User", )

    TestField1 = models.CharField()

    class Meta:
        pass

    def __str__(self):
        return str(self.pk)

    @staticmethod
    def get_create_url():
        return reverse("testapp1_TestModel1_create")

    def get_absolute_url(self):
        return reverse("testapp1_TestModel1_detail", args=(self.pk,))

    def get_update_url(self):
        return reverse("testapp1_TestModel1_update", args=(self.pk,))

    def get_delete_url(self):
        return reverse("testapp1_TestModel1_delete", args=(self.pk,))



"
`;

exports[`Render Basic Project App Files serializers.py 1`] = `
"
from rest_framework import serializers
from . import models


class TestModel1Serializer(serializers.ModelSerializer):

    class Meta:
        model = models.TestModel1
        fields = [
            'TestField1',
            'TestField1',
        ]

"
`;

exports[`Render Basic Project App Files test_views.py 1`] = `
"
import uuid
import pytest
import test_helpers
from psycopg2.extras import NumericRange, DateTimeTZRange, DateRange
from datetime import timedelta, time
from django.urls import reverse


pytestmark = [pytest.mark.django_db]



def tests_TestModel1_list_view(client):
    instance1 = test_helpers.create_testapp1_TestModel1()
    instance2 = test_helpers.create_testapp1_TestModel1()
    url = reverse("testapp1_TestModel1_list")
    response = client.get(url)
    assert response.status_code == 200
    assert str(instance1) in response.content.decode("utf-8")
    assert str(instance2) in response.content.decode("utf-8")


def tests_TestModel1_create_view(client):
    url = reverse("testapp1_TestModel1_create")
    data = {
      'TestField1': 'text',
      "TestField1": test_helpers.create_User().pk,
    }
    response = client.post(url, data)
    assert response.status_code == 302


def tests_TestModel1_detail_view(client):
    instance = test_helpers.create_testapp1_TestModel1()
    url = reverse("testapp1_TestModel1_detail", args=[instance.pk, ])
    response = client.get(url)
    assert response.status_code == 200
    assert str(instance) in response.content.decode("utf-8")

    
def tests_TestModel1_update_view(client):
    instance = test_helpers.create_testapp1_TestModel1()
    url = reverse("testapp1_TestModel1_update", args=[instance.pk, ])
    data = {
      'TestField1': 'text',
      "TestField1": test_helpers.create_User().pk,
    }
    response = client.post(url, data)
    assert response.status_code == 302
"
`;

exports[`Render Basic Project App Files urls.py 1`] = `
"
from django.urls import path, include
from rest_framework import routers

from . import api
from . import views


router = routers.DefaultRouter()
router.register("TestModel1", api.TestModel1ViewSet)

urlpatterns = (
    path("api/v1/", include(router.urls)),
    path("testapp1/TestModel1/", views.TestModel1ListView.as_view(), name="testapp1_TestModel1_list"),
    path("testapp1/TestModel1/create/", views.TestModel1CreateView.as_view(), name="testapp1_TestModel1_create"),
    path("testapp1/TestModel1/detail/<int:pk>/", views.TestModel1DetailView.as_view(), name="testapp1_TestModel1_detail"),
    path("testapp1/TestModel1/update/<int:pk>/", views.TestModel1UpdateView.as_view(), name="testapp1_TestModel1_update"),
    path("testapp1/TestModel1/delete/<int:pk>/", views.TestModel1DeleteView.as_view(), name="testapp1_TestModel1_delete"),
)
"
`;

exports[`Render Basic Project App Files views.py 1`] = `
"
from django.views import generic
from django.urls import reverse_lazy

from . import models
from . import forms


class TestModel1ListView(generic.ListView):
    model = models.TestModel1
    form_class = forms.TestModel1Form


class TestModel1CreateView(generic.CreateView):
    model = models.TestModel1
    form_class = forms.TestModel1Form


class TestModel1DetailView(generic.DetailView):
    model = models.TestModel1
    form_class = forms.TestModel1Form


class TestModel1UpdateView(generic.UpdateView):
    model = models.TestModel1
    form_class = forms.TestModel1Form
    pk_url_kwarg = "pk"


class TestModel1DeleteView(generic.DeleteView):
    model = models.TestModel1
    success_url = reverse_lazy("testapp1_TestModel1_list")

"
`;

exports[`Render Basic Project Model Files confirm_delete.html 1`] = `
"
{% extends "base.html" %}
{% block content %}
<form method="post">
  {% csrf_token %}
  <p>Are you sure you want to delete "{{ object }}"?</p>
  <div>
    <input class="btn btn-danger" value="Delete AnotherModel" type="submit">
  </div>
</form>
{% endblock %}
"
`;

exports[`Render Basic Project Model Files detail.html 1`] = `
"
{% extends "base.html" %}
{% load static %}
{% block content %}
    
<p>
    <a class="btn btn-light" href="{% url 'testapp1_TestModel1_list' %}">
     Listing
    </a>
</p>
    
<table class="table">
    <tr><td>Detail</td><td>{{ object }}</td></tr>
    <tr>
        <td>TestField1</td>
        <td>
            {{ object.TestField1 }}
        </td>
    </tr>

</table>
<a class="btn btn-primary" href="{{object.get_update_url}}">Edit</a>

{% endblock %}
"
`;

exports[`Render Basic Project Model Files form.html 1`] = `
"
{% extends "base.html" %}
{% load static %}
{% block content %}
    
<p>
    <a class="btn btn-light" href="{% url 'testapp1_TestModel1_list' %}">
     Listing
    </a>
</p>
    
<form method="post" enctype="multipart/form-data">
  {% csrf_token %}
  {{form.errors}}
  {{form.as_div}}
  <input type="submit" value="Save" class="btn btn-primary">
</form>

{% endblock %}
"
`;

exports[`Render Basic Project Model Files list.html 1`] = `
"
{% extends "base.html" %}
{% block content %}
{% for object in object_list %}
  <div class="m-2">
    <a href="{{ object.get_absolute_url }}">{{ object }}</a>
    <small class="ml-5">
      <a href="{{ object.get_delete_url }}">(Delete)</a>
    </small>
  </div>
{% endfor %}
<div>
  <a class="btn btn-primary" href="{% url 'testapp1_TestModel1_create' %}">
  Create a new TestModel1
  </a>
</div>
{% endblock %}
"
`;

exports[`Render Basic Project Root Files __init__.py 1`] = `
"
"
`;

exports[`Render Basic Project Root Files asgi.py 1`] = `
"
"""
ASGI entrypoint for TestProject. Configures Django and then runs the application
defined in the ASGI_APPLICATION setting.
"""

import os
import django
from channels.routing import get_default_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "TestProject.settings")
django.setup()
application = get_default_application()
"
`;

exports[`Render Basic Project Root Files base.html 1`] = `
"
{% load static %}
<html>
  <head>
    <title>Django Builder - TestProject</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    
    {% block extrahead %}{% endblock %}
  </head>
  <body>
    {% block allcontent %}
    <div id="content" class="container">
      <h2>Home: <a href="{% url 'index' %}">TestProject</a></h2>
      <div class="card">
        <div class="card-body">
          <p class="card-text">{% block content %}{% endblock %}</p>
        </div>
      </div>
    </div>
</div>
  {% endblock %}
  </body>
</html>
"
`;

exports[`Render Basic Project Root Files consumers.py 1`] = `
"
from channels.generic.websocket import WebsocketConsumer


class TestProjectWebSocketConsumer(WebsocketConsumer):

    def connect(self):
        self.accept()

    def receive(self, text_data=None, bytes_data=None):
        if text_data:
            print(f"Received text={text_data}")
            self.send(text_data="Hello from TestProject WebSocketConsumer!")
        if bytes_data:
            print(f"Received bytes={bytes_data}")
            self.send(bytes_data=b"Hello from TestProject WebSocketConsumer!")

    def disconnect(self, message):
        # Called when disconnected
        pass
"
`;

exports[`Render Basic Project Root Files create.html 1`] = `
"
<tbody hx-swap-oob="beforeend:#{{ model_id }}-table">
  <tr>
      <td>{{ object }}</td>
      <td>
      <button hx-post="{{ object.get_htmx_delete_url }}"
          hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'
          hx-swap='outerHTML'
          hx-target="closest tr"
          type="submit"
        >Delete
      </button>
      </td>
  </tr>
</tbody>

{{ form.as_div }}
<button type="submit">Add</button>
"
`;

exports[`Render Basic Project Root Files delete_button.html 1`] = `
"
<button hx-post="{{ object.get_htmx_delete_url }}"
        hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'
        hx-swap='outerHTML'
        hx-target="closest tr"
        type="submit"
  >Delete
</button>
"
`;

exports[`Render Basic Project Root Files form.html 1`] = `
"
<form hx-post="{{ create_url }}" hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'>
  {{ form.as_div }}
  <button type="submit">Add</button>
</form>
"
`;

exports[`Render Basic Project Root Files htmx.html 1`] = `
"
{% extends "base.html" %}
{% block extrahead %}
<script src="https://unpkg.com/htmx.org@1.8.4"></script>
<script>
  htmx.config.useTemplateFragments = true;
</script>
{% endblock %}
{% block allcontent %}
<div id="content" class="container">
  <h2>Home: <a href="{% url 'index' %}">TestProject</a></h2>
  <div class="container">
    <div class="row">
    <div class="col col-lg-6">
      <h5>Add A TestModel1</h5>
      <div hx-get="{% url 'testapp1_TestModel1_htmx_create' %}" hx-trigger="load" hx-swap="outerHTML"></div>
      <h4>TestModel1 List</h4>
      <div hx-get="{% url 'testapp1_TestModel1_htmx_list' %}" hx-trigger="load">
      </div>
    </div>
    </div>
  </div>
</div>
{% endblock %}
"
`;

exports[`Render Basic Project Root Files index.html 1`] = `
"
{% extends "base.html" %}
{% block content %}

<div class='container'>
  <div class='card'>
    <div class='card-body'>
      <div class="m-2">
        <h4>testapp1</h4>
      </div>
      <div class="m-2">
      <a class="btn btn-light" href="{% url 'testapp1_TestModel1_list' %}">TestModel1 Listing</a>
      </div>
    </div>
  </div>
</div>

<div class='container'>
  <div class='card'>
    <div class='card-body'>
      <div>
        <a href="{% url 'htmx' %}">HTMX UI</a>
      </div>
    </div>
  </div>
</div>
{% endblock %}
"
`;

exports[`Render Basic Project Root Files list.html 1`] = `
"
<table class="table">
  <thead>
      <tr>
          <th>Name</th>
          <th>Actions</th>
      </tr>
  </thead>
  <tbody id="{{ model_id }}-table">
    {% for object in objects %}
    <tr>
      <td>{{ object }}</td>
      <td>
        {% include "./delete_button.html" with object=object %}
      </td>
    <tr>
     {% endfor %}
  </tbody>
</table>
"
`;

exports[`Render Basic Project Root Files manage.py 1`] = `
"
#!/usr/bin/env python
import os
import sys

if __name__ == '__main__':
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TestProject.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)
"
`;

exports[`Render Basic Project Root Files pytest.ini 1`] = `
"
[pytest]
DJANGO_SETTINGS_MODULE = test_settings
addopts=-v -ra
"
`;

exports[`Render Basic Project Root Files requirements.txt 1`] = `
"
Django==4.1
django-extensions
djangorestframework
psycopg2-binary
Pillow
"
`;

exports[`Render Basic Project Root Files requirements-dev.txt 1`] = `
"
pytest
pytest-django
"
`;

exports[`Render Basic Project Root Files routing.py 1`] = `
"
from django.conf.urls import url

from channels.routing import ChannelNameRouter, ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack

from TestProject.consumers import TestProject_WebSocketConsumer

from testapp1.consumers import Testapp1Consumer

application = ProtocolTypeRouter({

    # WebSocket handler
    "websocket": AuthMiddlewareStack(
        URLRouter([
            url(r"^ws/$", XXX_PROJECT_NAME_XXX_WebSocketConsumer.as_asgi()),
        ])
    ),
    "channel": ChannelNameRouter({
        "testapp1": Testapp1Consumer,
    })
})
"
`;

exports[`Render Basic Project Root Files settings.py 1`] = `
"
"""
Django settings for TestProject project.

TestProject Description

For more information on this file, see
https://docs.djangoproject.com/

"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '^l)7d*%h&db4uft@dk%h-w&nup#pu%)a!d)c7jwgoixo5_hm0$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    
    
    'testapp1',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
]

ROOT_URLCONF = 'TestProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TestProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'mysecretpassword',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
"
`;

exports[`Render Basic Project Root Files test_helpers.py 1`] = `
"
import random
import string
import uuid

from datetime import timedelta, time
from django.contrib.auth.models import User
from django.contrib.auth.models import AbstractUser
from django.contrib.auth.models import AbstractBaseUser
from django.contrib.auth.models import Group
from django.contrib.contenttypes.models import ContentType
from datetime import datetime
from psycopg2.extras import NumericRange, DateTimeTZRange, DateRange

from testapp1 import models as testapp1_models


def random_string(length=10):
    # Create a random string of length length
    letters = string.ascii_lowercase
    return "".join(random.choice(letters) for i in range(length))


def create_User(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return User.objects.create(**defaults)


def create_AbstractUser(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return AbstractUser.objects.create(**defaults)


def create_AbstractBaseUser(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return AbstractBaseUser.objects.create(**defaults)


def create_Group(**kwargs):
    defaults = {
        "name": "%s_group" % random_string(5),
    }
    defaults.update(**kwargs)
    return Group.objects.create(**defaults)


def create_ContentType(**kwargs):
    defaults = {
    }
    defaults.update(**kwargs)
    return ContentType.objects.create(**defaults)


def create_testapp1_TestModel1(**kwargs):
    defaults = {
        'TestField1': 'text',
        "TestField1": create_User(),
    }
    defaults.update(**kwargs)
    result = testapp1_models.TestModel1.objects.create(**defaults)
    return result

  
"
`;

exports[`Render Basic Project Root Files test_requirements.txt 1`] = `
"
pytest
pytest-django
"
`;

exports[`Render Basic Project Root Files test_settings.py 1`] = `
"
from TestProject.settings import *  # noqa

# Override any settings required for tests here
"
`;

exports[`Render Basic Project Root Files urls.py 1`] = `
"
"""
TestProject URL Configuration

The 'urlpatterns' list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.views.generic import TemplateView

from . import views

urlpatterns = [
    path('', TemplateView.as_view(template_name='index.html'), name='index'),
    path('testapp1/', include('testapp1.urls')),
    path('admin/', admin.site.urls),
]
"
`;

exports[`Render Basic Project Root Files views.py 1`] = `
"
# No project views

"
`;

exports[`Render Basic Project Root Files wsgi.py 1`] = `
"
"""
WSGI config for TestProject.

It exposes the WSGI callable as a module-level variable named 'application'.

For more information on this file, see
https://docs.djangoproject.com/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TestProject.settings')

application = get_wsgi_application()
"
`;

exports[`Render Channels Project App Files __init__.py 1`] = `
"
"
`;

exports[`Render Channels Project App Files __init__.py 2`] = `
"
"
`;

exports[`Render Channels Project App Files admin.py 1`] = `
"
from django.contrib import admin
from django import forms

from . import models


class TestModel3AdminForm(forms.ModelForm):

    class Meta:
        model = models.TestModel3
        fields = "__all__"


class TestModel3Admin(admin.ModelAdmin):
    form = TestModel3AdminForm
    list_display = [
    ]
    readonly_fields = [
    ]


admin.site.register(models.TestModel3, TestModel3Admin)

"
`;

exports[`Render Channels Project App Files api.py 1`] = `
"
from rest_framework import viewsets, permissions
from . import models
from . import serializers


class TestModel3ViewSet(viewsets.ModelViewSet):
    """ViewSet for the TestModel3 class"""

    queryset = models.TestModel3.objects.all()
    serializer_class = serializers.TestModel3Serializer
    permission_classes = [permissions.IsAuthenticated]

"
`;

exports[`Render Channels Project App Files consumers.py 1`] = `
"
from channels.consumer import SyncConsumer


class Testapp3Consumer(SyncConsumer):

    def app1_message(self, message):
        # do something with message
        pass
"
`;

exports[`Render Channels Project App Files forms.py 1`] = `
"
from django import forms
from . import models

class TestModel3Form(forms.ModelForm):
    class Meta:
        model = models.TestModel3
        fields = [
        ]

    def __init__(self, *args, **kwargs):
        super(TestModel3Form, self).__init__(*args, **kwargs)
"
`;

exports[`Render Channels Project App Files htmx.py 1`] = `
"
from django.views import generic
from django.shortcuts import HttpResponse
from django.template.response import TemplateResponse
from django.urls import reverse_lazy

from . import models
from . import forms

class HTMXTestModel3ListView(generic.ListView):
    model = models.TestModel3
    form_class = forms.TestModel3Form
    
    def get(self, request, *args, **kwargs):
        super().get(request, *args, **kwargs)
        context = {
            "model_id": self.model._meta.model_name,
            "objects": self.get_queryset()
        }
        return TemplateResponse(request,'htmx/list.html', context)


class HTMXTestModel3CreateView(generic.CreateView):
    model = models.TestModel3
    form_class = forms.TestModel3Form
    
    def get(self, request, *args, **kwargs):
        super().get(request, *args, **kwargs)
        context = {
            "create_url": self.model.get_htmx_create_url(),
            "form": self.get_form()
        }
        return TemplateResponse(request, 'htmx/form.html', context)

    def form_valid(self, form):
        super().form_valid(form)
        context = {
            "model_id": self.model._meta.model_name,
            "object": self.object,
            "form": form
        }
        return TemplateResponse(self.request, 'htmx/create.html', context)

    def form_invalid(self, form):
        super().form_invalid(form)
        context = {
            "create_url": self.model.get_htmx_create_url(),
            "form": self.get_form()
        }
        return TemplateResponse(self.request, 'htmx/form.html', context)


class HTMXTestModel3DeleteView(generic.DeleteView):
    model = models.TestModel3
    success_url = reverse_lazy("testapp3_TestModel3_htmx_list")
    
    def form_valid(self, form):
        super().form_valid(form)
        return HttpResponse()

"
`;

exports[`Render Channels Project App Files models.py 1`] = `
"
import time
import uuid
from datetime import timedelta, datetime, time

from django.db import models
from django.urls import reverse
from django.contrib.postgres import fields as postgres_fields
from django.contrib.postgres.fields import ranges as postgres_range_fields


class TestModel3(models.Model):



    class Meta:
        pass

    def __str__(self):
        return str(self.pk)

    @staticmethod
    def get_create_url():
        return reverse("testapp3_TestModel3_create")

    def get_absolute_url(self):
        return reverse("testapp3_TestModel3_detail", args=(self.pk,))

    def get_update_url(self):
        return reverse("testapp3_TestModel3_update", args=(self.pk,))

    def get_delete_url(self):
        return reverse("testapp3_TestModel3_delete", args=(self.pk,))



"
`;

exports[`Render Channels Project App Files serializers.py 1`] = `
"
from rest_framework import serializers
from . import models


class TestModel3Serializer(serializers.ModelSerializer):

    class Meta:
        model = models.TestModel3
        fields = [
        ]

"
`;

exports[`Render Channels Project App Files test_views.py 1`] = `
"
import uuid
import pytest
import test_helpers
from psycopg2.extras import NumericRange, DateTimeTZRange, DateRange
from datetime import timedelta, time
from django.urls import reverse


pytestmark = [pytest.mark.django_db]



def tests_TestModel3_list_view(client):
    instance1 = test_helpers.create_testapp3_TestModel3()
    instance2 = test_helpers.create_testapp3_TestModel3()
    url = reverse("testapp3_TestModel3_list")
    response = client.get(url)
    assert response.status_code == 200
    assert str(instance1) in response.content.decode("utf-8")
    assert str(instance2) in response.content.decode("utf-8")


def tests_TestModel3_create_view(client):
    url = reverse("testapp3_TestModel3_create")
    data = {
    }
    response = client.post(url, data)
    assert response.status_code == 302


def tests_TestModel3_detail_view(client):
    instance = test_helpers.create_testapp3_TestModel3()
    url = reverse("testapp3_TestModel3_detail", args=[instance.pk, ])
    response = client.get(url)
    assert response.status_code == 200
    assert str(instance) in response.content.decode("utf-8")

    
def tests_TestModel3_update_view(client):
    instance = test_helpers.create_testapp3_TestModel3()
    url = reverse("testapp3_TestModel3_update", args=[instance.pk, ])
    data = {
    }
    response = client.post(url, data)
    assert response.status_code == 302
"
`;

exports[`Render Channels Project App Files urls.py 1`] = `
"
from django.urls import path, include
from rest_framework import routers

from . import api
from . import views


router = routers.DefaultRouter()
router.register("TestModel3", api.TestModel3ViewSet)

urlpatterns = (
    path("api/v1/", include(router.urls)),
    path("testapp3/TestModel3/", views.TestModel3ListView.as_view(), name="testapp3_TestModel3_list"),
    path("testapp3/TestModel3/create/", views.TestModel3CreateView.as_view(), name="testapp3_TestModel3_create"),
    path("testapp3/TestModel3/detail/<int:pk>/", views.TestModel3DetailView.as_view(), name="testapp3_TestModel3_detail"),
    path("testapp3/TestModel3/update/<int:pk>/", views.TestModel3UpdateView.as_view(), name="testapp3_TestModel3_update"),
    path("testapp3/TestModel3/delete/<int:pk>/", views.TestModel3DeleteView.as_view(), name="testapp3_TestModel3_delete"),
)
"
`;

exports[`Render Channels Project App Files views.py 1`] = `
"
from django.views import generic
from django.urls import reverse_lazy

from . import models
from . import forms


class TestModel3ListView(generic.ListView):
    model = models.TestModel3
    form_class = forms.TestModel3Form


class TestModel3CreateView(generic.CreateView):
    model = models.TestModel3
    form_class = forms.TestModel3Form


class TestModel3DetailView(generic.DetailView):
    model = models.TestModel3
    form_class = forms.TestModel3Form


class TestModel3UpdateView(generic.UpdateView):
    model = models.TestModel3
    form_class = forms.TestModel3Form
    pk_url_kwarg = "pk"


class TestModel3DeleteView(generic.DeleteView):
    model = models.TestModel3
    success_url = reverse_lazy("testapp3_TestModel3_list")

"
`;

exports[`Render Channels Project Model Files confirm_delete.html 1`] = `
"
{% extends "base.html" %}
{% block content %}
<form method="post">
  {% csrf_token %}
  <p>Are you sure you want to delete "{{ object }}"?</p>
  <div>
    <input class="btn btn-danger" value="Delete AnotherModel" type="submit">
  </div>
</form>
{% endblock %}
"
`;

exports[`Render Channels Project Model Files detail.html 1`] = `
"
{% extends "base.html" %}
{% load static %}
{% block content %}
    
<p>
    <a class="btn btn-light" href="{% url 'testapp3_TestModel3_list' %}">
     Listing
    </a>
</p>
    
<table class="table">
    <tr><td>Detail</td><td>{{ object }}</td></tr>

</table>
<a class="btn btn-primary" href="{{object.get_update_url}}">Edit</a>

{% endblock %}
"
`;

exports[`Render Channels Project Model Files form.html 1`] = `
"
{% extends "base.html" %}
{% load static %}
{% block content %}
    
<p>
    <a class="btn btn-light" href="{% url 'testapp3_TestModel3_list' %}">
     Listing
    </a>
</p>
    
<form method="post" enctype="multipart/form-data">
  {% csrf_token %}
  {{form.errors}}
  {{form.as_div}}
  <input type="submit" value="Save" class="btn btn-primary">
</form>

{% endblock %}
"
`;

exports[`Render Channels Project Model Files list.html 1`] = `
"
{% extends "base.html" %}
{% block content %}
{% for object in object_list %}
  <div class="m-2">
    <a href="{{ object.get_absolute_url }}">{{ object }}</a>
    <small class="ml-5">
      <a href="{{ object.get_delete_url }}">(Delete)</a>
    </small>
  </div>
{% endfor %}
<div>
  <a class="btn btn-primary" href="{% url 'testapp3_TestModel3_create' %}">
  Create a new TestModel3
  </a>
</div>
{% endblock %}
"
`;

exports[`Render Channels Project Root Files __init__.py 1`] = `
"
"
`;

exports[`Render Channels Project Root Files asgi.py 1`] = `
"
"""
ASGI entrypoint for TestProject. Configures Django and then runs the application
defined in the ASGI_APPLICATION setting.
"""

import os
import django
from channels.routing import get_default_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "TestProject.settings")
django.setup()
application = get_default_application()
"
`;

exports[`Render Channels Project Root Files base.html 1`] = `
"
{% load static %}
<html>
  <head>
    <title>Django Builder - TestProject</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    
    {% block extrahead %}{% endblock %}
  </head>
  <body>
    {% block allcontent %}
    <div id="content" class="container">
      <h2>Home: <a href="{% url 'index' %}">TestProject</a></h2>
      <div class="card">
        <div class="card-body">
          <p class="card-text">{% block content %}{% endblock %}</p>
        </div>
      </div>
    </div>
    <div class="container mt-3">
      <div class="card">
      <div class="card-body">
          <h5 class="card-title">WebSocket Messages</h5>
          <p class="card-text"><code id="messages"></code></p>
      </div>
    </div>
</div>
<script>
    var wsprotocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://'
    var ws = wsprotocol + window.location.hostname + ':' + window.location.port + '/ws/'
    var socket = new WebSocket(ws);

    socket.onopen = function() {
      // Web Socket is connected, send some text
      socket.send("Text from Javascript");
      // Send some binary data
      socket.send(new Blob(["Bytes from Javascript"]));
    };

    socket.onmessage = function (evt) { 
      console.log(evt)
      var received_msg = evt.data;
      console.log("Message received...", received_msg);
      var node = document.createElement("div");
      if (received_msg instanceof Blob) {
        received_msg.text().then(function (received_text) {
          var textnode = document.createTextNode("> " + received_text);
          node.appendChild(textnode);
          document.getElementById("messages").appendChild(node);
        })
      } else {
        var textnode = document.createTextNode("> " + received_msg);
        node.appendChild(textnode);
        document.getElementById("messages").appendChild(node);
      }
    };
  </script>
  {% endblock %}
  </body>
</html>
"
`;

exports[`Render Channels Project Root Files consumers.py 1`] = `
"
from channels.generic.websocket import WebsocketConsumer


class TestProjectWebSocketConsumer(WebsocketConsumer):

    def connect(self):
        self.accept()

    def receive(self, text_data=None, bytes_data=None):
        if text_data:
            print(f"Received text={text_data}")
            self.send(text_data="Hello from TestProject WebSocketConsumer!")
        if bytes_data:
            print(f"Received bytes={bytes_data}")
            self.send(bytes_data=b"Hello from TestProject WebSocketConsumer!")

    def disconnect(self, message):
        # Called when disconnected
        pass
"
`;

exports[`Render Channels Project Root Files create.html 1`] = `
"
<tbody hx-swap-oob="beforeend:#{{ model_id }}-table">
  <tr>
      <td>{{ object }}</td>
      <td>
      <button hx-post="{{ object.get_htmx_delete_url }}"
          hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'
          hx-swap='outerHTML'
          hx-target="closest tr"
          type="submit"
        >Delete
      </button>
      </td>
  </tr>
</tbody>

{{ form.as_div }}
<button type="submit">Add</button>
"
`;

exports[`Render Channels Project Root Files delete_button.html 1`] = `
"
<button hx-post="{{ object.get_htmx_delete_url }}"
        hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'
        hx-swap='outerHTML'
        hx-target="closest tr"
        type="submit"
  >Delete
</button>
"
`;

exports[`Render Channels Project Root Files form.html 1`] = `
"
<form hx-post="{{ create_url }}" hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'>
  {{ form.as_div }}
  <button type="submit">Add</button>
</form>
"
`;

exports[`Render Channels Project Root Files htmx.html 1`] = `
"
{% extends "base.html" %}
{% block extrahead %}
<script src="https://unpkg.com/htmx.org@1.8.4"></script>
<script>
  htmx.config.useTemplateFragments = true;
</script>
{% endblock %}
{% block allcontent %}
<div id="content" class="container">
  <h2>Home: <a href="{% url 'index' %}">TestProject</a></h2>
  <div class="container">
    <div class="row">
    <div class="col col-lg-6">
      <h5>Add A TestModel3</h5>
      <div hx-get="{% url 'testapp3_TestModel3_htmx_create' %}" hx-trigger="load" hx-swap="outerHTML"></div>
      <h4>TestModel3 List</h4>
      <div hx-get="{% url 'testapp3_TestModel3_htmx_list' %}" hx-trigger="load">
      </div>
    </div>
    </div>
  </div>
</div>
{% endblock %}
"
`;

exports[`Render Channels Project Root Files index.html 1`] = `
"
{% extends "base.html" %}
{% block content %}

<div class='container'>
  <div class='card'>
    <div class='card-body'>
      <div class="m-2">
        <h4>testapp3</h4>
      </div>
      <div class="m-2">
      <a class="btn btn-light" href="{% url 'testapp3_TestModel3_list' %}">TestModel3 Listing</a>
      </div>
    </div>
  </div>
</div>

<div class='container'>
  <div class='card'>
    <div class='card-body'>
      <div>
        <a href="{% url 'htmx' %}">HTMX UI</a>
      </div>
    </div>
  </div>
</div>
{% endblock %}
"
`;

exports[`Render Channels Project Root Files list.html 1`] = `
"
<table class="table">
  <thead>
      <tr>
          <th>Name</th>
          <th>Actions</th>
      </tr>
  </thead>
  <tbody id="{{ model_id }}-table">
    {% for object in objects %}
    <tr>
      <td>{{ object }}</td>
      <td>
        {% include "./delete_button.html" with object=object %}
      </td>
    <tr>
     {% endfor %}
  </tbody>
</table>
"
`;

exports[`Render Channels Project Root Files manage.py 1`] = `
"
#!/usr/bin/env python
import os
import sys

if __name__ == '__main__':
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TestProject.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)
"
`;

exports[`Render Channels Project Root Files pytest.ini 1`] = `
"
[pytest]
DJANGO_SETTINGS_MODULE = test_settings
addopts=-v -ra
"
`;

exports[`Render Channels Project Root Files requirements.txt 1`] = `
"
Django==4.1
django-extensions
djangorestframework
channels
channels_redis
psycopg2-binary
Pillow
"
`;

exports[`Render Channels Project Root Files requirements-dev.txt 1`] = `
"
pytest
pytest-django
"
`;

exports[`Render Channels Project Root Files routing.py 1`] = `
"
from django.conf.urls import url

from channels.routing import ChannelNameRouter, ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack

from TestProject.consumers import TestProject_WebSocketConsumer

from testapp3.consumers import Testapp3Consumer

application = ProtocolTypeRouter({

    # WebSocket handler
    "websocket": AuthMiddlewareStack(
        URLRouter([
            url(r"^ws/$", XXX_PROJECT_NAME_XXX_WebSocketConsumer.as_asgi()),
        ])
    ),
    "channel": ChannelNameRouter({
        "testapp3": Testapp3Consumer,
    })
})
"
`;

exports[`Render Channels Project Root Files settings.py 1`] = `
"
"""
Django settings for TestProject project.

TestProject Description

For more information on this file, see
https://docs.djangoproject.com/

"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '^l)7d*%h&db4uft@dk%h-w&nup#pu%)a!d)c7jwgoixo5_hm0$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'channels',
    
    'testapp3',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
]

ROOT_URLCONF = 'TestProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TestProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'mysecretpassword',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
"
`;

exports[`Render Channels Project Root Files test_helpers.py 1`] = `
"
import random
import string
import uuid

from datetime import timedelta, time
from django.contrib.auth.models import User
from django.contrib.auth.models import AbstractUser
from django.contrib.auth.models import AbstractBaseUser
from django.contrib.auth.models import Group
from django.contrib.contenttypes.models import ContentType
from datetime import datetime
from psycopg2.extras import NumericRange, DateTimeTZRange, DateRange

from testapp3 import models as testapp3_models


def random_string(length=10):
    # Create a random string of length length
    letters = string.ascii_lowercase
    return "".join(random.choice(letters) for i in range(length))


def create_User(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return User.objects.create(**defaults)


def create_AbstractUser(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return AbstractUser.objects.create(**defaults)


def create_AbstractBaseUser(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return AbstractBaseUser.objects.create(**defaults)


def create_Group(**kwargs):
    defaults = {
        "name": "%s_group" % random_string(5),
    }
    defaults.update(**kwargs)
    return Group.objects.create(**defaults)


def create_ContentType(**kwargs):
    defaults = {
    }
    defaults.update(**kwargs)
    return ContentType.objects.create(**defaults)


def create_testapp3_TestModel3(**kwargs):
    defaults = {
    }
    defaults.update(**kwargs)
    result = testapp3_models.TestModel3.objects.create(**defaults)
    return result

  
"
`;

exports[`Render Channels Project Root Files test_requirements.txt 1`] = `
"
pytest
pytest-django
"
`;

exports[`Render Channels Project Root Files test_settings.py 1`] = `
"
from TestProject.settings import *  # noqa

# Override any settings required for tests here
"
`;

exports[`Render Channels Project Root Files urls.py 1`] = `
"
"""
TestProject URL Configuration

The 'urlpatterns' list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.views.generic import TemplateView

from . import views

urlpatterns = [
    path('', TemplateView.as_view(template_name='index.html'), name='index'),
    path('testapp3/', include('testapp3.urls')),
    path('admin/', admin.site.urls),
]
"
`;

exports[`Render Channels Project Root Files views.py 1`] = `
"
# No project views

"
`;

exports[`Render Channels Project Root Files wsgi.py 1`] = `
"
"""
WSGI config for TestProject.

It exposes the WSGI callable as a module-level variable named 'application'.

For more information on this file, see
https://docs.djangoproject.com/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TestProject.settings')

application = get_wsgi_application()
"
`;

exports[`Render HTMX Project Root Files __init__.py 1`] = `
"
"
`;

exports[`Render HTMX Project Root Files asgi.py 1`] = `
"
"""
ASGI entrypoint for TestProject. Configures Django and then runs the application
defined in the ASGI_APPLICATION setting.
"""

import os
import django
from channels.routing import get_default_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "TestProject.settings")
django.setup()
application = get_default_application()
"
`;

exports[`Render HTMX Project Root Files base.html 1`] = `
"
{% load static %}
<html>
  <head>
    <title>Django Builder - TestProject</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    
    {% block extrahead %}{% endblock %}
  </head>
  <body>
    {% block allcontent %}
    <div id="content" class="container">
      <h2>Home: <a href="{% url 'index' %}">TestProject</a></h2>
      <div class="card">
        <div class="card-body">
          <p class="card-text">{% block content %}{% endblock %}</p>
        </div>
      </div>
    </div>
</div>
  {% endblock %}
  </body>
</html>
"
`;

exports[`Render HTMX Project Root Files consumers.py 1`] = `
"
from channels.generic.websocket import WebsocketConsumer


class TestProjectWebSocketConsumer(WebsocketConsumer):

    def connect(self):
        self.accept()

    def receive(self, text_data=None, bytes_data=None):
        if text_data:
            print(f"Received text={text_data}")
            self.send(text_data="Hello from TestProject WebSocketConsumer!")
        if bytes_data:
            print(f"Received bytes={bytes_data}")
            self.send(bytes_data=b"Hello from TestProject WebSocketConsumer!")

    def disconnect(self, message):
        # Called when disconnected
        pass
"
`;

exports[`Render HTMX Project Root Files create.html 1`] = `
"
<tbody hx-swap-oob="beforeend:#{{ model_id }}-table">
  <tr>
      <td>{{ object }}</td>
      <td>
      <button hx-post="{{ object.get_htmx_delete_url }}"
          hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'
          hx-swap='outerHTML'
          hx-target="closest tr"
          type="submit"
        >Delete
      </button>
      </td>
  </tr>
</tbody>

{{ form.as_div }}
<button type="submit">Add</button>
"
`;

exports[`Render HTMX Project Root Files delete_button.html 1`] = `
"
<button hx-post="{{ object.get_htmx_delete_url }}"
        hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'
        hx-swap='outerHTML'
        hx-target="closest tr"
        type="submit"
  >Delete
</button>
"
`;

exports[`Render HTMX Project Root Files form.html 1`] = `
"
<form hx-post="{{ create_url }}" hx-headers='{"X-CSRFToken": "{{ csrf_token }}"}'>
  {{ form.as_div }}
  <button type="submit">Add</button>
</form>
"
`;

exports[`Render HTMX Project Root Files htmx.html 1`] = `
"
{% extends "base.html" %}
{% block extrahead %}
<script src="https://unpkg.com/htmx.org@1.8.4"></script>
<script>
  htmx.config.useTemplateFragments = true;
</script>
{% endblock %}
{% block allcontent %}
<div id="content" class="container">
  <h2>Home: <a href="{% url 'index' %}">TestProject</a></h2>
  <div class="container">
    <div class="row">
    <div class="col col-lg-6">
      <h5>Add A TestModel2</h5>
      <div hx-get="{% url 'testapp2_TestModel2_htmx_create' %}" hx-trigger="load" hx-swap="outerHTML"></div>
      <h4>TestModel2 List</h4>
      <div hx-get="{% url 'testapp2_TestModel2_htmx_list' %}" hx-trigger="load">
      </div>
    </div>
    </div>
  </div>
</div>
{% endblock %}
"
`;

exports[`Render HTMX Project Root Files index.html 1`] = `
"
{% extends "base.html" %}
{% block content %}

<div class='container'>
  <div class='card'>
    <div class='card-body'>
      <div class="m-2">
        <h4>testapp2</h4>
      </div>
      <div class="m-2">
      <a class="btn btn-light" href="{% url 'testapp2_TestModel2_list' %}">TestModel2 Listing</a>
      </div>
    </div>
  </div>
</div>

<div class='container'>
  <div class='card'>
    <div class='card-body'>
      <div>
        <a href="{% url 'htmx' %}">HTMX UI</a>
      </div>
    </div>
  </div>
</div>
{% endblock %}
"
`;

exports[`Render HTMX Project Root Files list.html 1`] = `
"
<table class="table">
  <thead>
      <tr>
          <th>Name</th>
          <th>Actions</th>
      </tr>
  </thead>
  <tbody id="{{ model_id }}-table">
    {% for object in objects %}
    <tr>
      <td>{{ object }}</td>
      <td>
        {% include "./delete_button.html" with object=object %}
      </td>
    <tr>
     {% endfor %}
  </tbody>
</table>
"
`;

exports[`Render HTMX Project Root Files manage.py 1`] = `
"
#!/usr/bin/env python
import os
import sys

if __name__ == '__main__':
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TestProject.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)
"
`;

exports[`Render HTMX Project Root Files pytest.ini 1`] = `
"
[pytest]
DJANGO_SETTINGS_MODULE = test_settings
addopts=-v -ra
"
`;

exports[`Render HTMX Project Root Files requirements.txt 1`] = `
"
Django==4.1
django-extensions
djangorestframework
django-htmx
psycopg2-binary
Pillow
"
`;

exports[`Render HTMX Project Root Files requirements-dev.txt 1`] = `
"
pytest
pytest-django
"
`;

exports[`Render HTMX Project Root Files routing.py 1`] = `
"
from django.conf.urls import url

from channels.routing import ChannelNameRouter, ProtocolTypeRouter, URLRouter
from channels.auth import AuthMiddlewareStack

from TestProject.consumers import TestProject_WebSocketConsumer

from testapp2.consumers import Testapp2Consumer

application = ProtocolTypeRouter({

    # WebSocket handler
    "websocket": AuthMiddlewareStack(
        URLRouter([
            url(r"^ws/$", XXX_PROJECT_NAME_XXX_WebSocketConsumer.as_asgi()),
        ])
    ),
    "channel": ChannelNameRouter({
        "testapp2": Testapp2Consumer,
    })
})
"
`;

exports[`Render HTMX Project Root Files settings.py 1`] = `
"
"""
Django settings for TestProject project.

TestProject Description

For more information on this file, see
https://docs.djangoproject.com/

"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '^l)7d*%h&db4uft@dk%h-w&nup#pu%)a!d)c7jwgoixo5_hm0$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    
    'django_htmx',
    'testapp2',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
]

ROOT_URLCONF = 'TestProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TestProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'mysecretpassword',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
"
`;

exports[`Render HTMX Project Root Files test_helpers.py 1`] = `
"
import random
import string
import uuid

from datetime import timedelta, time
from django.contrib.auth.models import User
from django.contrib.auth.models import AbstractUser
from django.contrib.auth.models import AbstractBaseUser
from django.contrib.auth.models import Group
from django.contrib.contenttypes.models import ContentType
from datetime import datetime
from psycopg2.extras import NumericRange, DateTimeTZRange, DateRange

from testapp2 import models as testapp2_models


def random_string(length=10):
    # Create a random string of length length
    letters = string.ascii_lowercase
    return "".join(random.choice(letters) for i in range(length))


def create_User(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return User.objects.create(**defaults)


def create_AbstractUser(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return AbstractUser.objects.create(**defaults)


def create_AbstractBaseUser(**kwargs):
    defaults = {
        "username": "%s_username" % random_string(5),
        "email": "%s_username@tempurl.com" % random_string(5),
    }
    defaults.update(**kwargs)
    return AbstractBaseUser.objects.create(**defaults)


def create_Group(**kwargs):
    defaults = {
        "name": "%s_group" % random_string(5),
    }
    defaults.update(**kwargs)
    return Group.objects.create(**defaults)


def create_ContentType(**kwargs):
    defaults = {
    }
    defaults.update(**kwargs)
    return ContentType.objects.create(**defaults)


def create_testapp2_TestModel2(**kwargs):
    defaults = {
        'TestField2': 'text',
        'TestField3': 'text',
        "TestField2": create_User(),
        "TestField3": create_User(),
    }
    defaults.update(**kwargs)
    result = testapp2_models.TestModel2.objects.create(**defaults)
    return result

  
"
`;

exports[`Render HTMX Project Root Files test_requirements.txt 1`] = `
"
pytest
pytest-django
"
`;

exports[`Render HTMX Project Root Files test_settings.py 1`] = `
"
from TestProject.settings import *  # noqa

# Override any settings required for tests here
"
`;

exports[`Render HTMX Project Root Files urls.py 1`] = `
"
"""
TestProject URL Configuration

The 'urlpatterns' list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.views.generic import TemplateView

from . import views

urlpatterns = [
    path('', TemplateView.as_view(template_name='index.html'), name='index'),
    path('testapp2/', include('testapp2.urls')),
    path('htmx/', views.htmx_home, name='htmx'),
    path('admin/', admin.site.urls),
]
"
`;

exports[`Render HTMX Project Root Files views.py 1`] = `
"
from django.shortcuts import render


def htmx_home(request):
    return render(request, 'htmx/htmx.html')

"
`;

exports[`Render HTMX Project Root Files wsgi.py 1`] = `
"
"""
WSGI config for TestProject.

It exposes the WSGI callable as a module-level variable named 'application'.

For more information on this file, see
https://docs.djangoproject.com/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TestProject.settings')

application = get_wsgi_application()
"
`;

exports[`Render HTMX ProjectApp Files __init__.py 1`] = `
"
"
`;

exports[`Render HTMX ProjectApp Files __init__.py 2`] = `
"
"
`;

exports[`Render HTMX ProjectApp Files admin.py 1`] = `
"
from django.contrib import admin
from django import forms

from . import models


class TestModel2AdminForm(forms.ModelForm):

    class Meta:
        model = models.TestModel2
        fields = "__all__"


class TestModel2Admin(admin.ModelAdmin):
    form = TestModel2AdminForm
    list_display = [
        'TestField2',
        'TestField3',
        'TestField2',
        'TestField3',
    ]
    readonly_fields = [
        'TestField2',
        'TestField3',
        'TestField2',
        'TestField3',
    ]


admin.site.register(models.TestModel2, TestModel2Admin)

"
`;

exports[`Render HTMX ProjectApp Files api.py 1`] = `
"
from rest_framework import viewsets, permissions
from . import models
from . import serializers


class TestModel2ViewSet(viewsets.ModelViewSet):
    """ViewSet for the TestModel2 class"""

    queryset = models.TestModel2.objects.all()
    serializer_class = serializers.TestModel2Serializer
    permission_classes = [permissions.IsAuthenticated]

"
`;

exports[`Render HTMX ProjectApp Files consumers.py 1`] = `
"
from channels.consumer import SyncConsumer


class Testapp2Consumer(SyncConsumer):

    def app1_message(self, message):
        # do something with message
        pass
"
`;

exports[`Render HTMX ProjectApp Files forms.py 1`] = `
"
from django import forms
from . import models
#from  import auth.User
#from  import auth.User

class TestModel2Form(forms.ModelForm):
    class Meta:
        model = models.TestModel2
        fields = [
            'TestField2',
            'TestField3',
            'TestField2',
            'TestField3',
        ]

    def __init__(self, *args, **kwargs):
        super(TestModel2Form, self).__init__(*args, **kwargs)
        #self.fields["TestField2"].queryset = [object Object].objects.all()
        #self.fields["TestField3"].queryset = [object Object].objects.all()
"
`;

exports[`Render HTMX ProjectApp Files htmx.py 1`] = `
"
from django.views import generic
from django.shortcuts import HttpResponse
from django.template.response import TemplateResponse
from django.urls import reverse_lazy

from . import models
from . import forms

class HTMXTestModel2ListView(generic.ListView):
    model = models.TestModel2
    form_class = forms.TestModel2Form
    
    def get(self, request, *args, **kwargs):
        super().get(request, *args, **kwargs)
        context = {
            "model_id": self.model._meta.model_name,
            "objects": self.get_queryset()
        }
        return TemplateResponse(request,'htmx/list.html', context)


class HTMXTestModel2CreateView(generic.CreateView):
    model = models.TestModel2
    form_class = forms.TestModel2Form
    
    def get(self, request, *args, **kwargs):
        super().get(request, *args, **kwargs)
        context = {
            "create_url": self.model.get_htmx_create_url(),
            "form": self.get_form()
        }
        return TemplateResponse(request, 'htmx/form.html', context)

    def form_valid(self, form):
        super().form_valid(form)
        context = {
            "model_id": self.model._meta.model_name,
            "object": self.object,
            "form": form
        }
        return TemplateResponse(self.request, 'htmx/create.html', context)

    def form_invalid(self, form):
        super().form_invalid(form)
        context = {
            "create_url": self.model.get_htmx_create_url(),
            "form": self.get_form()
        }
        return TemplateResponse(self.request, 'htmx/form.html', context)


class HTMXTestModel2DeleteView(generic.DeleteView):
    model = models.TestModel2
    success_url = reverse_lazy("testapp2_TestModel2_htmx_list")
    
    def form_valid(self, form):
        super().form_valid(form)
        return HttpResponse()

"
`;

exports[`Render HTMX ProjectApp Files models.py 1`] = `
"
import time
import uuid
from datetime import timedelta, datetime, time

from django.db import models
from django.urls import reverse
from django.contrib.postgres import fields as postgres_fields
from django.contrib.postgres.fields import ranges as postgres_range_fields


class TestModel2(models.Model):

    TestField2 = models.ForeignKey("auth.User", )
    TestField3 = models.ForeignKey("auth.User", )

    TestField2 = models.CharField()
    TestField3 = models.CharField()

    class Meta:
        pass

    def __str__(self):
        return str(self.pk)

    @staticmethod
    def get_create_url():
        return reverse("testapp2_TestModel2_create")

    def get_absolute_url(self):
        return reverse("testapp2_TestModel2_detail", args=(self.pk,))

    def get_update_url(self):
        return reverse("testapp2_TestModel2_update", args=(self.pk,))

    def get_delete_url(self):
        return reverse("testapp2_TestModel2_delete", args=(self.pk,))

    @staticmethod
    def get_htmx_create_url():
        return reverse("testapp2_TestModel2_htmx_create")

    def get_htmx_delete_url(self):
        return reverse("testapp2_TestModel2_htmx_delete", args=(self.pk,))


"
`;

exports[`Render HTMX ProjectApp Files serializers.py 1`] = `
"
from rest_framework import serializers
from . import models


class TestModel2Serializer(serializers.ModelSerializer):

    class Meta:
        model = models.TestModel2
        fields = [
            'TestField2',
            'TestField3',
            'TestField2',
            'TestField3',
        ]

"
`;

exports[`Render HTMX ProjectApp Files test_views.py 1`] = `
"
import uuid
import pytest
import test_helpers
from psycopg2.extras import NumericRange, DateTimeTZRange, DateRange
from datetime import timedelta, time
from django.urls import reverse


pytestmark = [pytest.mark.django_db]



def tests_TestModel2_list_view(client):
    instance1 = test_helpers.create_testapp2_TestModel2()
    instance2 = test_helpers.create_testapp2_TestModel2()
    url = reverse("testapp2_TestModel2_list")
    response = client.get(url)
    assert response.status_code == 200
    assert str(instance1) in response.content.decode("utf-8")
    assert str(instance2) in response.content.decode("utf-8")


def tests_TestModel2_create_view(client):
    url = reverse("testapp2_TestModel2_create")
    data = {
      'TestField2': 'text',
      'TestField3': 'text',
      "TestField2": test_helpers.create_User().pk,
      "TestField3": test_helpers.create_User().pk,
    }
    response = client.post(url, data)
    assert response.status_code == 302


def tests_TestModel2_detail_view(client):
    instance = test_helpers.create_testapp2_TestModel2()
    url = reverse("testapp2_TestModel2_detail", args=[instance.pk, ])
    response = client.get(url)
    assert response.status_code == 200
    assert str(instance) in response.content.decode("utf-8")

    
def tests_TestModel2_update_view(client):
    instance = test_helpers.create_testapp2_TestModel2()
    url = reverse("testapp2_TestModel2_update", args=[instance.pk, ])
    data = {
      'TestField2': 'text',
      'TestField3': 'text',
      "TestField2": test_helpers.create_User().pk,
      "TestField3": test_helpers.create_User().pk,
    }
    response = client.post(url, data)
    assert response.status_code == 302
"
`;

exports[`Render HTMX ProjectApp Files urls.py 1`] = `
"
from django.urls import path, include
from rest_framework import routers

from . import api
from . import views
from . import htmx


router = routers.DefaultRouter()
router.register("TestModel2", api.TestModel2ViewSet)

urlpatterns = (
    path("api/v1/", include(router.urls)),
    path("testapp2/TestModel2/", views.TestModel2ListView.as_view(), name="testapp2_TestModel2_list"),
    path("testapp2/TestModel2/create/", views.TestModel2CreateView.as_view(), name="testapp2_TestModel2_create"),
    path("testapp2/TestModel2/detail/<int:pk>/", views.TestModel2DetailView.as_view(), name="testapp2_TestModel2_detail"),
    path("testapp2/TestModel2/update/<int:pk>/", views.TestModel2UpdateView.as_view(), name="testapp2_TestModel2_update"),
    path("testapp2/TestModel2/delete/<int:pk>/", views.TestModel2DeleteView.as_view(), name="testapp2_TestModel2_delete"),
    path("testapp2/htmx/TestModel2/", htmx.HTMXTestModel2ListView.as_view(), name="testapp2_TestModel2_htmx_list"),
    path("testapp2/htmx/TestModel2/create/", htmx.HTMXTestModel2CreateView.as_view(), name="testapp2_TestModel2_htmx_create"),
    path("testapp2/htmx/TestModel2/delete/<int:pk>/", htmx.HTMXTestModel2DeleteView.as_view(), name="testapp2_TestModel2_htmx_delete"),
)
"
`;

exports[`Render HTMX ProjectApp Files views.py 1`] = `
"
from django.views import generic
from django.urls import reverse_lazy

from . import models
from . import forms


class TestModel2ListView(generic.ListView):
    model = models.TestModel2
    form_class = forms.TestModel2Form


class TestModel2CreateView(generic.CreateView):
    model = models.TestModel2
    form_class = forms.TestModel2Form


class TestModel2DetailView(generic.DetailView):
    model = models.TestModel2
    form_class = forms.TestModel2Form


class TestModel2UpdateView(generic.UpdateView):
    model = models.TestModel2
    form_class = forms.TestModel2Form
    pk_url_kwarg = "pk"


class TestModel2DeleteView(generic.DeleteView):
    model = models.TestModel2
    success_url = reverse_lazy("testapp2_TestModel2_list")

"
`;

exports[`Render HTMX ProjectModel Files confirm_delete.html 1`] = `
"
{% extends "base.html" %}
{% block content %}
<form method="post">
  {% csrf_token %}
  <p>Are you sure you want to delete "{{ object }}"?</p>
  <div>
    <input class="btn btn-danger" value="Delete AnotherModel" type="submit">
  </div>
</form>
{% endblock %}
"
`;

exports[`Render HTMX ProjectModel Files detail.html 1`] = `
"
{% extends "base.html" %}
{% load static %}
{% block content %}
    
<p>
    <a class="btn btn-light" href="{% url 'testapp2_TestModel2_list' %}">
     Listing
    </a>
</p>
    
<table class="table">
    <tr><td>Detail</td><td>{{ object }}</td></tr>
    <tr>
        <td>TestField2</td>
        <td>
            {{ object.TestField2 }}
        </td>
    </tr>
    <tr>
        <td>TestField3</td>
        <td>
            {{ object.TestField3 }}
        </td>
    </tr>

</table>
<a class="btn btn-primary" href="{{object.get_update_url}}">Edit</a>

{% endblock %}
"
`;

exports[`Render HTMX ProjectModel Files form.html 1`] = `
"
{% extends "base.html" %}
{% load static %}
{% block content %}
    
<p>
    <a class="btn btn-light" href="{% url 'testapp2_TestModel2_list' %}">
     Listing
    </a>
</p>
    
<form method="post" enctype="multipart/form-data">
  {% csrf_token %}
  {{form.errors}}
  {{form.as_div}}
  <input type="submit" value="Save" class="btn btn-primary">
</form>

{% endblock %}
"
`;

exports[`Render HTMX ProjectModel Files list.html 1`] = `
"
{% extends "base.html" %}
{% block content %}
{% for object in object_list %}
  <div class="m-2">
    <a href="{{ object.get_absolute_url }}">{{ object }}</a>
    <small class="ml-5">
      <a href="{{ object.get_delete_url }}">(Delete)</a>
    </small>
  </div>
{% endfor %}
<div>
  <a class="btn btn-primary" href="{% url 'testapp2_TestModel2_create' %}">
  Create a new TestModel2
  </a>
</div>
{% endblock %}
"
`;
